{"abi":[{"type":"function","name":"completeBridgeTransfer","inputs":[{"name":"_bridgeTransferId","type":"bytes32","internalType":"bytes32"},{"name":"_secret","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getBridgeTransferDetail","inputs":[{"name":"_bridgeTransferId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"exists","type":"bool","internalType":"bool"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"originator","type":"address","internalType":"address"},{"name":"recipient","type":"address","internalType":"address"},{"name":"hashLock","type":"bytes32","internalType":"bytes32"},{"name":"timeLock","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"initiateBridgeTransfer","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"_originator","type":"address","internalType":"address"},{"name":"_recipient","type":"address","internalType":"address"},{"name":"_hashLock","type":"bytes32","internalType":"bytes32"},{"name":"_timeLock","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"_bridgeTransferId","type":"bytes32","internalType":"bytes32"}],"stateMutability":"payable"},{"type":"function","name":"refundBridgeTransfer","inputs":[{"name":"_bridgeTransferId","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"BridgeTransferCompleted","inputs":[{"name":"_bridgeTransferId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"_secret","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"BridgeTransferInitiated","inputs":[{"name":"_bridgeTransferId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"_originator","type":"address","indexed":true,"internalType":"address"},{"name":"_recipient","type":"address","indexed":true,"internalType":"address"},{"name":"_hashLock","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"_timeLock","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"BridgeTransferRefunded","inputs":[{"name":"_bridgeTransferId","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"completeBridgeTransfer(bytes32,bytes32)":"9f8f8799","getBridgeTransferDetail(bytes32)":"c83214a5","initiateBridgeTransfer(uint256,address,address,bytes32,uint256)":"4c29f8ea","refundBridgeTransfer(bytes32)":"57808020"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_bridgeTransferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"BridgeTransferCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_bridgeTransferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_originator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hashLock\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeLock\",\"type\":\"uint256\"}],\"name\":\"BridgeTransferInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_bridgeTransferId\",\"type\":\"bytes32\"}],\"name\":\"BridgeTransferRefunded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bridgeTransferId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secret\",\"type\":\"bytes32\"}],\"name\":\"completeBridgeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bridgeTransferId\",\"type\":\"bytes32\"}],\"name\":\"getBridgeTransferDetail\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hashLock\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timeLock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_originator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_hashLock\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_timeLock\",\"type\":\"uint256\"}],\"name\":\"initiateBridgeTransfer\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bridgeTransferId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bridgeTransferId\",\"type\":\"bytes32\"}],\"name\":\"refundBridgeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"completeBridgeTransfer(bytes32,bytes32)\":{\"details\":\"Completes the bridging Counterparty\",\"params\":{\"_bridgeTransferId\":\"Unique identifier for the BridgeTransfer\",\"_secret\":\"The secret that unlocks the funds*\"}},\"getBridgeTransferDetail(bytes32)\":{\"details\":\"Returns the details of a specific bridge transfer\",\"params\":{\"_bridgeTransferId\":\"Unique identifier for the bridge transfer\"},\"returns\":{\"amount\":\"The amount of assets to be allocated and sent\",\"exists\":\"Boolean indicating if the bridge transfer exists\",\"hashLock\":\"The hash of the secret that will unlock the funds\",\"originator\":\"The address allowed to withdraw (claim) the funds\",\"recipient\":\"The address intended to receive the assets\",\"timeLock\":\"The timestamp until which this BridgeTransfer is valid*\"}},\"initiateBridgeTransfer(uint256,address,address,bytes32,uint256)\":{\"details\":\"Creates a new atomic bridge transfer\",\"params\":{\"_hashLock\":\"The hash of the secret (HASH) that will unlock the funds\",\"_originator\":\"The address allowed to withdraw (claim) the funds once the correct secret is provided on timeout. Used to transfer the funds.\",\"_recipient\":\"The address on the other chain to which to transfer the funds\",\"_timeLock\":\"The number of blocks until which this BridgeTransfer is valid and can be executed\",\"amount\":\"The amount of assets to be allocated and sent\"},\"returns\":{\"_bridgeTransferId\":\"A unique id representing this BridgeTransfer*\"}},\"refundBridgeTransfer(bytes32)\":{\"details\":\"Refunds the funds back to the initiator if the timelock has expired\",\"params\":{\"_bridgeTransferId\":\"Unique identifier for the BridgeTransfer*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IAtomicBridgeInitiator.sol\":\"IAtomicBridgeInitiator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/IAtomicBridgeInitiator.sol\":{\"keccak256\":\"0xdaa0a9501195516da93f4d3940a0846e68647340435e5248a50bc4837f142778\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://959fbe128a7b615d930960292c02b858a3429a949473d8830032a4009a1e4da3\",\"dweb:/ipfs/Qma6ZF54oYHjoRTroWRpXdJKNcyxHSspJfz1Y2ZBMKEm9x\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_bridgeTransferId","type":"bytes32","indexed":true},{"internalType":"bytes32","name":"_secret","type":"bytes32","indexed":false}],"type":"event","name":"BridgeTransferCompleted","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"_bridgeTransferId","type":"bytes32","indexed":true},{"internalType":"address","name":"_originator","type":"address","indexed":true},{"internalType":"address","name":"_recipient","type":"address","indexed":true},{"internalType":"bytes32","name":"_hashLock","type":"bytes32","indexed":false},{"internalType":"uint256","name":"_timeLock","type":"uint256","indexed":false}],"type":"event","name":"BridgeTransferInitiated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"_bridgeTransferId","type":"bytes32","indexed":true}],"type":"event","name":"BridgeTransferRefunded","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"_bridgeTransferId","type":"bytes32"},{"internalType":"bytes32","name":"_secret","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"completeBridgeTransfer"},{"inputs":[{"internalType":"bytes32","name":"_bridgeTransferId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBridgeTransferDetail","outputs":[{"internalType":"bool","name":"exists","type":"bool"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"originator","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"bytes32","name":"hashLock","type":"bytes32"},{"internalType":"uint256","name":"timeLock","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"_originator","type":"address"},{"internalType":"address","name":"_recipient","type":"address"},{"internalType":"bytes32","name":"_hashLock","type":"bytes32"},{"internalType":"uint256","name":"_timeLock","type":"uint256"}],"stateMutability":"payable","type":"function","name":"initiateBridgeTransfer","outputs":[{"internalType":"bytes32","name":"_bridgeTransferId","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"_bridgeTransferId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"refundBridgeTransfer"}],"devdoc":{"kind":"dev","methods":{"completeBridgeTransfer(bytes32,bytes32)":{"details":"Completes the bridging Counterparty","params":{"_bridgeTransferId":"Unique identifier for the BridgeTransfer","_secret":"The secret that unlocks the funds*"}},"getBridgeTransferDetail(bytes32)":{"details":"Returns the details of a specific bridge transfer","params":{"_bridgeTransferId":"Unique identifier for the bridge transfer"},"returns":{"amount":"The amount of assets to be allocated and sent","exists":"Boolean indicating if the bridge transfer exists","hashLock":"The hash of the secret that will unlock the funds","originator":"The address allowed to withdraw (claim) the funds","recipient":"The address intended to receive the assets","timeLock":"The timestamp until which this BridgeTransfer is valid*"}},"initiateBridgeTransfer(uint256,address,address,bytes32,uint256)":{"details":"Creates a new atomic bridge transfer","params":{"_hashLock":"The hash of the secret (HASH) that will unlock the funds","_originator":"The address allowed to withdraw (claim) the funds once the correct secret is provided on timeout. Used to transfer the funds.","_recipient":"The address on the other chain to which to transfer the funds","_timeLock":"The number of blocks until which this BridgeTransfer is valid and can be executed","amount":"The amount of assets to be allocated and sent"},"returns":{"_bridgeTransferId":"A unique id representing this BridgeTransfer*"}},"refundBridgeTransfer(bytes32)":{"details":"Refunds the funds back to the initiator if the timelock has expired","params":{"_bridgeTransferId":"Unique identifier for the BridgeTransfer*"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/IAtomicBridgeInitiator.sol":"IAtomicBridgeInitiator"},"evmVersion":"paris","libraries":{}},"sources":{"src/IAtomicBridgeInitiator.sol":{"keccak256":"0xdaa0a9501195516da93f4d3940a0846e68647340435e5248a50bc4837f142778","urls":["bzz-raw://959fbe128a7b615d930960292c02b858a3429a949473d8830032a4009a1e4da3","dweb:/ipfs/Qma6ZF54oYHjoRTroWRpXdJKNcyxHSspJfz1Y2ZBMKEm9x"],"license":"MIT"}},"version":1},"id":26}