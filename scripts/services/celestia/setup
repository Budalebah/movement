#!/usr/bin/env bash
set -e
export CELESTIA_ENV_STORAGE_PATH="$DOT_MOVEMENT/env/celestia"
mkdir -p "$CELESTIA_ENV_STORAGE_PATH"
export CELESTIA_DA_BLOCK_HEIGHT=0
export CELESTIA_NODE_AUTH_TOKEN=
export CELESTIA_ADDRESS=
export CELESTIA_NAMESPACE_BYTES="$(openssl rand -hex 10)"
export CELESTIA_CHAIN_ID="$(openssl rand -hex 10)"
export CELESTIA_APP_PATH="$DOT_MOVEMENT/celestia/${CELESTIA_CHAIN_ID}/.celestia-app"
export CELESTIA_NODE_PATH="$DOT_MOVEMENT/celestia/${CELESTIA_CHAIN_ID}/bridge"

: ${CELESTIA_LOG_LEVEL:="INFO"}
export CELESTIA_LOG_LEVEL

contains() {
    local value="$1"
    shift  # Shift the arguments to leave the rest of the array
    for arg in "$@"; do
        if [[ "$arg" == "$value" ]]; then
            return 0  # Return 0 for true/success
        fi
    done
    return 1  # Return 1 for false/failure
}


if contains "arabica" "$@"; then
    echo "Setting up 'arabica' network"
    celestia light init --p2p.network arabica
    export CELESTIA_DA_BLOCK_HEIGHT="$(curl https://rpc.celestia-arabica-11.com/block | jq -r '.result.block.header.height')"
    export CELESTIA_NODE_AUTH_TOKEN="$(celestia light auth admin --p2p.network arabica)"
    export CELESTIA_ADDRESS="$(./scripts/celestia/get-arabica-11-address)"
else 
    echo "Setting up 'local' network"
    ./scripts/celestia/celestia-local-init
    export CELESTIA_NODE_AUTH_TOKEN="$(celestia bridge auth admin --node.store ${CELESTIA_NODE_PATH})"
    export CELESTIA_ADDRESS=$(./scripts/celestia/get-local-address)
    echo "CELESTIA_ADDRESS=$CELESTIA_ADDRESS"
fi

# write all of the environment variables to a file
env | grep CELESTIA_ > "$CELESTIA_ENV_STORAGE_PATH/.env"